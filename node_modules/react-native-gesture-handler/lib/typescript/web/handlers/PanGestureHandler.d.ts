import { AdaptedPointerEvent } from '../interfaces';
import GestureHandler from './GestureHandler';
export default class PanGestureHandler extends GestureHandler {
    private readonly customActivationProperties;
    velocityX: number;
    velocityY: number;
    private minDistSq;
    private activeOffsetXStart;
    private activeOffsetXEnd;
    private failOffsetXStart;
    private failOffsetXEnd;
    private activeOffsetYStart;
    private activeOffsetYEnd;
    private failOffsetYStart;
    private failOffsetYEnd;
    private minVelocityX;
    private minVelocityY;
    private minVelocitySq;
    private minPointers;
    private maxPointers;
    private startX;
    private startY;
    private offsetX;
    private offsetY;
    private lastX;
    private lastY;
    private activateAfterLongPress;
    init(ref: number, propsRef: React.RefObject<unknown>): void;
    updateGestureConfig({ enabled, ...props }: {
        [x: string]: any;
        enabled?: boolean | undefined;
    }): void;
    protected resetConfig(): void;
    protected transformNativeEvent(event: AdaptedPointerEvent): {
        translationX?: undefined;
        translationY?: undefined;
        absoluteX?: undefined;
        absoluteY?: undefined;
        velocityX?: undefined;
        velocityY?: undefined;
        x?: undefined;
        y?: undefined;
    } | {
        translationX: number;
        translationY: number;
        absoluteX: number;
        absoluteY: number;
        velocityX: number;
        velocityY: number;
        x: number;
        y: number;
    };
    private getTranslationX;
    private getTranslationY;
    protected onPointerDown(event: AdaptedPointerEvent): void;
    protected onPointerAdd(event: AdaptedPointerEvent): void;
    protected onPointerUp(event: AdaptedPointerEvent): void;
    protected onPointerRemove(event: AdaptedPointerEvent): void;
    protected onPointerMove(event: AdaptedPointerEvent): void;
    protected onPointerCancel(event: AdaptedPointerEvent): void;
    protected onPointerOutOfBounds(event: AdaptedPointerEvent): void;
    private shouldActivate;
    private shouldFail;
    private tryBegin;
    private checkBegan;
    protected activate(event: AdaptedPointerEvent, force?: boolean): void;
    protected resetProgress(): void;
}
