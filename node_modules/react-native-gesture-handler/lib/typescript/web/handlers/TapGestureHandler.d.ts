import { AdaptedPointerEvent } from '../interfaces';
import GestureHandler from './GestureHandler';
export default class TapGestureHandler extends GestureHandler {
    private maxDeltaX;
    private maxDeltaY;
    private maxDistSq;
    private maxDurationMs;
    private maxDelayMs;
    private numberOfTaps;
    private minNumberOfPointers;
    private currentMaxNumberOfPointers;
    private startX;
    private startY;
    private offsetX;
    private offsetY;
    private lastX;
    private lastY;
    private waitTimeout;
    private delayTimeout;
    private tapsSoFar;
    init(ref: number, propsRef: React.RefObject<unknown>): void;
    updateGestureConfig({ enabled, ...props }: {
        [x: string]: any;
        enabled?: boolean | undefined;
    }): void;
    protected resetConfig(): void;
    protected transformNativeEvent(event: AdaptedPointerEvent): {
        x: number;
        y: number;
        absoluteX: number;
        absoluteY: number;
    };
    private clearTimeouts;
    private startTap;
    private endTap;
    protected onPointerDown(event: AdaptedPointerEvent): void;
    protected onPointerAdd(_event: AdaptedPointerEvent): void;
    protected onPointerUp(event: AdaptedPointerEvent): void;
    protected onPointerRemove(_event: AdaptedPointerEvent): void;
    protected onPointerMove(event: AdaptedPointerEvent): void;
    protected onPointerOutOfBounds(event: AdaptedPointerEvent): void;
    protected onPointerCancel(event: AdaptedPointerEvent): void;
    private updateState;
    private trySettingPosition;
    private shouldFail;
    protected activate(event: AdaptedPointerEvent): void;
    protected onCancel(): void;
    protected resetProgress(): void;
}
