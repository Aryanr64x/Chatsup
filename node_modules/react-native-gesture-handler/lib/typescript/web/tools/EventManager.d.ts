import { AdaptedPointerEvent } from '../interfaces';
export default class EventManager {
    private activePointers;
    private readonly view;
    constructor(view: HTMLElement);
    setListeners(): void;
    private onPointerDown;
    private onPointerUp;
    private onPointerMove;
    private onPointerOut;
    private onPointerEnter;
    private onPointerCancel;
    private onPointerOutOfBounds;
    setOnPointerDown(callback: (event: AdaptedPointerEvent) => void): void;
    setOnPointerUp(callback: (event: AdaptedPointerEvent) => void): void;
    setOnPointerMove(callback: (event: AdaptedPointerEvent) => void): void;
    setOnPointerOut(callback: (event: AdaptedPointerEvent) => void): void;
    setOnPointerEnter(callback: (event: AdaptedPointerEvent) => void): void;
    setOnPointerCancel(callback: (event: AdaptedPointerEvent) => void): void;
    setOnPointerOutOfBounds(callback: (event: AdaptedPointerEvent) => void): void;
    private mapEvent;
    isPointerInBounds({ x, y }: {
        x: number;
        y: number;
    }): boolean;
    private addActivePointer;
    private removeActivePointer;
}
