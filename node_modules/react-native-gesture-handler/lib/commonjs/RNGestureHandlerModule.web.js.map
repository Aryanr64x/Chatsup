{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["Gestures","NativeViewGestureHandler","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","HammerGestures","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","interactionManager","InteractionManager","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","NodeManager","configureInteractions","getHandler","HammerNodeManager","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"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","sourcesContent":["import { ActionType } from './ActionType';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\nimport { isExperimentalWebImplementationEnabled } from './EnableExperimentalWebImplementation';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nconst interactionManager = new InteractionManager();\n\nexport default {\n  // Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      interactionManager.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        (config as unknown) as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, (config as unknown) as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      interactionManager.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]}