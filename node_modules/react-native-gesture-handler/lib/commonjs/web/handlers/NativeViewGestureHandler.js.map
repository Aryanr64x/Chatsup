{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["NativeViewGestureHandler","GestureHandler","init","ref","propsRef","setShouldCancelWhenOutside","view","style","hasAttribute","buttonRole","resetConfig","onPointerDown","event","tracker","addToTracker","currentState","State","UNDETERMINED","begin","activate","onPointerMove","_event","onPointerOut","cancel","onPointerUp","removeFromTracker","pointerId","getTrackedPointersCount","end","onPointerCancel","reset","shouldRecognizeSimultaneously","handler","getState","ACTIVE","disallowsInterruption","canBeInterrupted","disallowInterruption","getTag","shouldBeCancelledByOther","_handler"],"mappings":";;;;;;;AAAA;;AAGA;;;;;;AACe,MAAMA,wBAAN,SAAuCC,uBAAvC,CAAsD;AAAA;AAAA;;AAAA;;AAAA,kDAGpC,KAHoC;AAAA;;AAK5DC,EAAAA,IAAI,CAACC,GAAD,EAAcC,QAAd,EAAwD;AACjE,UAAMF,IAAN,CAAWC,GAAX,EAAgBC,QAAhB;AAEA,SAAKC,0BAAL,CAAgC,IAAhC;;AAEA,QAAI,CAAC,KAAKC,IAAV,EAAgB;AACd;AACD;;AAED,SAAKA,IAAL,CAAUC,KAAV,CAAgB,aAAhB,IAAiC,MAAjC;AACA,SAAKD,IAAL,CAAUC,KAAV,CAAgB,kBAAhB,IAAsC,MAAtC;AACA,SAAKD,IAAL,CAAUC,KAAV,CAAgB,YAAhB,IAAgC,MAAhC,CAXiE,CAajE;;AACA,SAAKD,IAAL,CAAUC,KAAV,CAAgB,oBAAhB,IAAwC,MAAxC;;AAEA,QAAI,KAAKD,IAAL,CAAUE,YAAV,CAAuB,MAAvB,CAAJ,EAAoC;AAClC,WAAKC,UAAL,GAAkB,IAAlB;AACD,KAFD,MAEO;AACL,WAAKA,UAAL,GAAkB,KAAlB;AACD;AACF;;AAESC,EAAAA,WAAW,GAAS;AAC5B,UAAMA,WAAN;AACD;;AAESC,EAAAA,aAAa,CAACC,KAAD,EAAmC;AACxD,UAAMD,aAAN,CAAoBC,KAApB;AACA,SAAKC,OAAL,CAAaC,YAAb,CAA0BF,KAA1B;;AAEA,QAAI,KAAKG,YAAL,KAAsBC,aAAMC,YAAhC,EAA8C;AAC5C,WAAKC,KAAL,CAAWN,KAAX;;AACA,UAAI,KAAKH,UAAT,EAAqB;AACnB,aAAKU,QAAL,CAAcP,KAAd;AACD;AACF;AACF;;AAESQ,EAAAA,aAAa,CAACC,MAAD,EAAoC,CACzD;AACD;;AAESC,EAAAA,YAAY,CAACV,KAAD,EAAmC;AACvD,SAAKW,MAAL,CAAYX,KAAZ;AACD;;AAESY,EAAAA,WAAW,CAACZ,KAAD,EAAmC;AACtD,SAAKC,OAAL,CAAaY,iBAAb,CAA+Bb,KAAK,CAACc,SAArC;;AACA,QAAI,CAAC,KAAKjB,UAAV,EAAsB;AACpB,WAAKU,QAAL,CAAcP,KAAd;AACD;;AACD,QAAI,KAAKC,OAAL,CAAac,uBAAb,OAA2C,CAA/C,EAAkD;AAChD,WAAKC,GAAL,CAAShB,KAAT;AACD;AACF;;AAESiB,EAAAA,eAAe,CAACjB,KAAD,EAAmC;AAC1D,SAAKW,MAAL,CAAYX,KAAZ;AACA,SAAKkB,KAAL;AACD;;AAEMC,EAAAA,6BAA6B,CAACC,OAAD,EAAmC;AACrE,QAAI,MAAMD,6BAAN,CAAoCC,OAApC,CAAJ,EAAkD;AAChD,aAAO,IAAP;AACD;;AAED,QACEA,OAAO,YAAYhC,wBAAnB,IACAgC,OAAO,CAACC,QAAR,OAAuBjB,aAAMkB,MAD7B,IAEAF,OAAO,CAACG,qBAAR,EAHF,EAIE;AACA,aAAO,KAAP;AACD;;AAED,UAAMC,gBAAgB,GAAG,CAAC,KAAKC,oBAA/B;;AAEA,QACE,KAAKtB,YAAL,KAAsBC,aAAMkB,MAA5B,IACAF,OAAO,CAACC,QAAR,OAAuBjB,aAAMkB,MAD7B,IAEAE,gBAHF,EAIE;AACA,aAAO,KAAP;AACD;;AAED,WACE,KAAKrB,YAAL,KAAsBC,aAAMkB,MAA5B,IACAE,gBADA,IAEAJ,OAAO,CAACM,MAAR,KAAmB,CAHrB;AAKD;;AAEMC,EAAAA,wBAAwB,CAACC,QAAD,EAAoC;AACjE,WAAO,CAAC,KAAKH,oBAAb;AACD;;AAEMF,EAAAA,qBAAqB,GAAY;AACtC,WAAO,KAAKE,oBAAZ;AACD;;AAvGkE","sourcesContent":["import { State } from '../../State';\nimport { AdaptedPointerEvent } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\nexport default class NativeViewGestureHandler extends GestureHandler {\n  private buttonRole!: boolean;\n\n  private disallowInterruption = false;\n\n  public init(ref: number, propsRef: React.RefObject<unknown>): void {\n    super.init(ref, propsRef);\n\n    this.setShouldCancelWhenOutside(true);\n\n    if (!this.view) {\n      return;\n    }\n\n    this.view.style['touchAction'] = 'auto';\n    this.view.style['webkitUserSelect'] = 'auto';\n    this.view.style['userSelect'] = 'auto';\n\n    //@ts-ignore Turns on defualt touch behavior on Safari\n    this.view.style['WebkitTouchCallout'] = 'auto';\n\n    if (this.view.hasAttribute('role')) {\n      this.buttonRole = true;\n    } else {\n      this.buttonRole = false;\n    }\n  }\n\n  protected resetConfig(): void {\n    super.resetConfig();\n  }\n\n  protected onPointerDown(event: AdaptedPointerEvent): void {\n    super.onPointerDown(event);\n    this.tracker.addToTracker(event);\n\n    if (this.currentState === State.UNDETERMINED) {\n      this.begin(event);\n      if (this.buttonRole) {\n        this.activate(event);\n      }\n    }\n  }\n\n  protected onPointerMove(_event: AdaptedPointerEvent): void {\n    //\n  }\n\n  protected onPointerOut(event: AdaptedPointerEvent): void {\n    this.cancel(event);\n  }\n\n  protected onPointerUp(event: AdaptedPointerEvent): void {\n    this.tracker.removeFromTracker(event.pointerId);\n    if (!this.buttonRole) {\n      this.activate(event);\n    }\n    if (this.tracker.getTrackedPointersCount() === 0) {\n      this.end(event);\n    }\n  }\n\n  protected onPointerCancel(event: AdaptedPointerEvent): void {\n    this.cancel(event);\n    this.reset();\n  }\n\n  public shouldRecognizeSimultaneously(handler: GestureHandler): boolean {\n    if (super.shouldRecognizeSimultaneously(handler)) {\n      return true;\n    }\n\n    if (\n      handler instanceof NativeViewGestureHandler &&\n      handler.getState() === State.ACTIVE &&\n      handler.disallowsInterruption()\n    ) {\n      return false;\n    }\n\n    const canBeInterrupted = !this.disallowInterruption;\n\n    if (\n      this.currentState === State.ACTIVE &&\n      handler.getState() === State.ACTIVE &&\n      canBeInterrupted\n    ) {\n      return false;\n    }\n\n    return (\n      this.currentState === State.ACTIVE &&\n      canBeInterrupted &&\n      handler.getTag() > 0\n    );\n  }\n\n  public shouldBeCancelledByOther(_handler: GestureHandler): boolean {\n    return !this.disallowInterruption;\n  }\n\n  public disallowsInterruption(): boolean {\n    return this.disallowInterruption;\n  }\n}\n"]}