"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const VELOCITY_FACTOR = 0.2;

class PointerTracker {
  constructor() {
    _defineProperty(this, "trackedPointers", new Map());
  }

  addToTracker(event) {
    if (this.trackedPointers.has(event.pointerId)) {
      return;
    }

    const newElement = {
      lastX: event.x,
      lastY: event.y,
      timeStamp: event.time,
      velocityX: 0,
      velocityY: 0
    };
    this.trackedPointers.set(event.pointerId, newElement);
  }

  removeFromTracker(pointerId) {
    this.trackedPointers.delete(pointerId);
  }

  track(event) {
    const element = this.trackedPointers.get(event.pointerId);

    if (!element) {
      return;
    }

    const dx = event.x - element.lastX;
    const dy = event.y - element.lastY;
    const dt = event.time - element.timeStamp;
    element.velocityX = dx / dt * 1000 * VELOCITY_FACTOR;
    element.velocityY = dy / dt * 1000 * VELOCITY_FACTOR;
    element.lastX = event.x;
    element.lastY = event.y;
    this.trackedPointers.set(event.pointerId, element);
  }

  getVelocityX(pointerId) {
    var _this$trackedPointers;

    return (_this$trackedPointers = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers === void 0 ? void 0 : _this$trackedPointers.velocityX;
  }

  getVelocityY(pointerId) {
    var _this$trackedPointers2;

    return (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers2 === void 0 ? void 0 : _this$trackedPointers2.velocityY;
  }

  getLastX(pointerId) {
    var _this$trackedPointers3;

    return (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers3 === void 0 ? void 0 : _this$trackedPointers3.lastX;
  }

  getLastY(pointerId) {
    var _this$trackedPointers4;

    return (_this$trackedPointers4 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers4 === void 0 ? void 0 : _this$trackedPointers4.lastY;
  }

  getLastAvgX() {
    return this.getSumX() / this.trackedPointers.size;
  }

  getLastAvgY() {
    return this.getSumY() / this.trackedPointers.size;
  }

  getSumX(ignoredPointer) {
    let sumX = 0;
    this.trackedPointers.forEach((value, key) => {
      if (key !== ignoredPointer) {
        sumX += value.lastX;
      }
    });
    return sumX;
  }

  getSumY(ignoredPointer) {
    let sumY = 0;
    this.trackedPointers.forEach((value, key) => {
      if (key !== ignoredPointer) {
        sumY += value.lastY;
      }
    });
    return sumY;
  }

  getTrackedPointersCount() {
    return this.trackedPointers.size;
  }

  getTrackedPointersID() {
    const keys = [];
    this.trackedPointers.forEach((_value, key) => {
      keys.push(key);
    });
    return keys;
  }

  getData() {
    return this.trackedPointers;
  }

  resetTracker() {
    this.trackedPointers.clear();
  }

  static shareCommonPointers(stPointers, ndPointers) {
    return stPointers.some(pointerId => ndPointers.includes(pointerId));
  }

}

exports.default = PointerTracker;
//# sourceMappingURL=PointerTracker.js.map