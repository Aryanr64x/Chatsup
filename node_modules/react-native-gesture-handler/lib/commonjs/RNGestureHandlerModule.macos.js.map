{"version":3,"sources":["RNGestureHandlerModule.macos.ts"],"names":["Gestures","NativeViewGestureHandler","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","HammerGestures","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","interactionManager","InteractionManager","GestureClass","NodeManager","configureInteractions","getHandler","HammerNodeManager","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"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","sourcesContent":["import { ActionType } from './ActionType';\nimport { isExperimentalWebImplementationEnabled } from './EnableExperimentalWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web_hammer/GestureHandler';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  // Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) return;\n\n      const interactionManager = new InteractionManager();\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      interactionManager.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        (config as unknown) as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) return;\n\n      const GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number, //ref\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: any) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]}