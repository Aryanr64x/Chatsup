{"version":3,"sources":["RNGestureHandlerModule.macos.ts"],"names":["isExperimentalWebImplementationEnabled","InteractionManager","NodeManager","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","NativeViewGestureHandler","HammerNodeManager","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","Gestures","HammerGestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","interactionManager","GestureClass","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"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","sourcesContent":["import { ActionType } from './ActionType';\nimport { isExperimentalWebImplementationEnabled } from './EnableExperimentalWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web_hammer/GestureHandler';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  // Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) return;\n\n      const interactionManager = new InteractionManager();\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      interactionManager.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        (config as unknown) as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) return;\n\n      const GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number, //ref\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: any) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]}