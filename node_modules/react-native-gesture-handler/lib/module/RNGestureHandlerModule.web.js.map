{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["InteractionManager","NodeManager","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","NativeViewGestureHandler","HammerNodeManager","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","isExperimentalWebImplementationEnabled","Gestures","HammerGestures","interactionManager","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"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","sourcesContent":["import { ActionType } from './ActionType';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\nimport { isExperimentalWebImplementationEnabled } from './EnableExperimentalWebImplementation';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nconst interactionManager = new InteractionManager();\n\nexport default {\n  // Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      interactionManager.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        (config as unknown) as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, (config as unknown) as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      interactionManager.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]}