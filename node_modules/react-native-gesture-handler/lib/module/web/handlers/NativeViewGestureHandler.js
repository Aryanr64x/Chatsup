function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { State } from '../../State';
import GestureHandler from './GestureHandler';
export default class NativeViewGestureHandler extends GestureHandler {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "buttonRole", void 0);

    _defineProperty(this, "disallowInterruption", false);
  }

  init(ref, propsRef) {
    super.init(ref, propsRef);
    this.setShouldCancelWhenOutside(true);

    if (!this.view) {
      return;
    }

    this.view.style['touchAction'] = 'auto';
    this.view.style['webkitUserSelect'] = 'auto';
    this.view.style['userSelect'] = 'auto'; //@ts-ignore Turns on defualt touch behavior on Safari

    this.view.style['WebkitTouchCallout'] = 'auto';

    if (this.view.hasAttribute('role')) {
      this.buttonRole = true;
    } else {
      this.buttonRole = false;
    }
  }

  resetConfig() {
    super.resetConfig();
  }

  onPointerDown(event) {
    super.onPointerDown(event);
    this.tracker.addToTracker(event);

    if (this.currentState === State.UNDETERMINED) {
      this.begin(event);

      if (this.buttonRole) {
        this.activate(event);
      }
    }
  }

  onPointerMove(_event) {//
  }

  onPointerOut(event) {
    this.cancel(event);
  }

  onPointerUp(event) {
    this.tracker.removeFromTracker(event.pointerId);

    if (!this.buttonRole) {
      this.activate(event);
    }

    if (this.tracker.getTrackedPointersCount() === 0) {
      this.end(event);
    }
  }

  onPointerCancel(event) {
    this.cancel(event);
    this.reset();
  }

  shouldRecognizeSimultaneously(handler) {
    if (super.shouldRecognizeSimultaneously(handler)) {
      return true;
    }

    if (handler instanceof NativeViewGestureHandler && handler.getState() === State.ACTIVE && handler.disallowsInterruption()) {
      return false;
    }

    const canBeInterrupted = !this.disallowInterruption;

    if (this.currentState === State.ACTIVE && handler.getState() === State.ACTIVE && canBeInterrupted) {
      return false;
    }

    return this.currentState === State.ACTIVE && canBeInterrupted && handler.getTag() > 0;
  }

  shouldBeCancelledByOther(_handler) {
    return !this.disallowInterruption;
  }

  disallowsInterruption() {
    return this.disallowInterruption;
  }

}
//# sourceMappingURL=NativeViewGestureHandler.js.map