{"version":3,"sources":["RotationGestureHandler.ts"],"names":["State","EventTypes","GestureHandler","RotationGestureDetector","ROTATION_RECOGNITION_THRESHOLD","Math","PI","RotationGestureHandler","onRotationBegin","_detector","onRotation","detector","event","previousRotation","rotation","getRotation","delta","getTimeDelta","velocity","abs","currentState","BEGAN","activate","onRotationEnd","end","rotationGestureListener","init","ref","propsRef","setShouldCancelWhenOutside","updateGestureConfig","enabled","props","transformNativeEvent","_event","anchorX","getAnchorX","anchorY","getAnchorY","rotationGestureDetector","cachedAnchorX","cachedAnchorY","onPointerDown","tracker","addToTracker","getTrackedPointersCount","tryBegin","onTouchEvent","onPointerMove","track","onPointerUp","resetTracker","removeFromTracker","pointerId","ACTIVE","eventType","UP","fail","onPointerCancel","reset","UNDETERMINED","resetProgress","begin","_force","onReset"],"mappings":"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","sourcesContent":["import { State } from '../../State';\nimport { AdaptedPointerEvent, EventTypes } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\nimport RotationGestureDetector, {\n  RotationGestureListener,\n} from '../detectors/RotationGestureDetector';\n\nconst ROTATION_RECOGNITION_THRESHOLD = Math.PI / 36;\n\nexport default class RotationGestureHandler extends GestureHandler {\n  private rotation = 0;\n  private velocity = 0;\n\n  private cachedAnchorX = 0;\n  private cachedAnchorY = 0;\n\n  private rotationGestureListener: RotationGestureListener = {\n    onRotationBegin: (_detector: RotationGestureDetector): boolean => true,\n    onRotation: (\n      detector: RotationGestureDetector,\n      event: AdaptedPointerEvent\n    ): boolean => {\n      const previousRotation: number = this.rotation;\n      this.rotation += detector.getRotation();\n\n      const delta = detector.getTimeDelta();\n\n      if (delta > 0) {\n        this.velocity = (this.rotation - previousRotation) / delta;\n      }\n\n      if (\n        Math.abs(this.rotation) >= ROTATION_RECOGNITION_THRESHOLD &&\n        this.currentState === State.BEGAN\n      ) {\n        this.activate(event);\n      }\n\n      return true;\n    },\n    onRotationEnd: (\n      _detector: RotationGestureDetector,\n      event: AdaptedPointerEvent\n    ): void => {\n      this.end(event);\n    },\n  };\n\n  private rotationGestureDetector: RotationGestureDetector = new RotationGestureDetector(\n    this.rotationGestureListener\n  );\n\n  public init(ref: number, propsRef: React.RefObject<unknown>): void {\n    super.init(ref, propsRef);\n\n    this.setShouldCancelWhenOutside(false);\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n\n    this.enabled = enabled;\n  }\n\n  protected transformNativeEvent(_event: AdaptedPointerEvent) {\n    return {\n      rotation: this.rotation ? this.rotation : 0,\n      anchorX: this.getAnchorX(),\n      anchorY: this.getAnchorY(),\n      velocity: this.velocity ? this.velocity : 0,\n    };\n  }\n\n  public getAnchorX(): number {\n    const anchorX = this.rotationGestureDetector.getAnchorX();\n\n    return anchorX ? anchorX : this.cachedAnchorX;\n  }\n\n  public getAnchorY(): number {\n    const anchorY = this.rotationGestureDetector.getAnchorY();\n\n    return anchorY ? anchorY : this.cachedAnchorY;\n  }\n\n  protected onPointerDown(event: AdaptedPointerEvent): void {\n    super.onPointerDown(event);\n\n    this.tracker.addToTracker(event);\n\n    if (this.tracker.getTrackedPointersCount() <= 1) {\n      return;\n    }\n\n    this.tryBegin(event);\n    this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n  }\n\n  protected onPointerMove(event: AdaptedPointerEvent): void {\n    if (\n      this.tracker.getTrackedPointersCount() < 2 ||\n      !this.rotationGestureDetector\n    ) {\n      return;\n    }\n\n    if (this.getAnchorX()) {\n      this.cachedAnchorX = this.getAnchorX();\n    }\n    if (this.getAnchorY()) {\n      this.cachedAnchorY = this.getAnchorY();\n    }\n\n    this.tracker.track(event);\n\n    this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n\n    super.onPointerMove(event);\n  }\n\n  protected onPointerUp(event: AdaptedPointerEvent): void {\n    if (!this.rotationGestureDetector) {\n      this.tracker.resetTracker();\n      return;\n    }\n\n    if (this.tracker.getTrackedPointersCount() > 1) {\n      this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n      this.tracker.removeFromTracker(event.pointerId);\n    } else {\n      this.tracker.removeFromTracker(event.pointerId);\n      this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n      if (this.currentState !== State.ACTIVE) {\n        return;\n      }\n    }\n\n    if (event.eventType !== EventTypes.UP) {\n      return;\n    }\n\n    if (this.currentState === State.ACTIVE) {\n      this.end(event);\n    } else {\n      this.fail(event);\n    }\n  }\n\n  protected onPointerCancel(event: AdaptedPointerEvent): void {\n    this.end(event);\n    this.reset();\n  }\n\n  protected tryBegin(event: AdaptedPointerEvent): void {\n    if (this.currentState !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.resetProgress();\n\n    this.begin(event);\n  }\n\n  protected activate(event: AdaptedPointerEvent, _force?: boolean): void {\n    if (this.currentState !== State.ACTIVE) {\n      this.resetProgress();\n    }\n\n    super.activate(event);\n  }\n\n  protected onReset(): void {\n    if (this.currentState === State.ACTIVE) {\n      return;\n    }\n\n    this.rotation = 0;\n    this.velocity = 0;\n  }\n}\n"]}